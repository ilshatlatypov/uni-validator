import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

import ru.jvdev.univalidator.UniValidator;
import ru.jvdev.univalidator.ValidationError;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'ilatypov' at '23.08.16 9:24' with Gradle 2.4
 *
 * @author ilatypov, @date 23.08.16 9:24
 */
public class UniValidatorTest {

    private static final String FIELD_IS_REQUIRED = "Field is required";

    @Test
    public void testOkIfRequiredFieldPresent() {
        Person person = new Person("John");
        String constraintFileName = "name-required.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertTrue(validationErrors.isEmpty());
    }

    @Test
    public void testOkIfNonRequiredFieldPresent() {
        Person person = new Person("John");
        String constraintFileName = "name-not-required.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertTrue(validationErrors.isEmpty());
    }

    @Test
    public void testOkIfNonRequiredFieldMissing() {
        Person person = new Person(null);
        String constraintFileName = "name-not-required.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertTrue(validationErrors.isEmpty());
    }

    @Test
    public void testErrorIfRequiredFieldMissing() {
        Person person = new Person(null);
        String constraintFileName = "name-required.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertEquals(1, validationErrors.size());
        assertValidationError("name", FIELD_IS_REQUIRED, null, validationErrors.get(0));
    }

    @Test
    public void testErrorIfRequiredByDefaultFieldMissing() throws Exception {
        Person person = new Person(null);
        String constraintFileName = "name-default.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertEquals(1, validationErrors.size());
        assertValidationError("name", FIELD_IS_REQUIRED, null, validationErrors.get(0));
    }

    @Test
    public void testOkIfNotBlankFieldIsIndeedNotBlank() throws Exception {
        Person person = new Person("John");
        String constraintFileName = "name-not-blank.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertTrue(validationErrors.isEmpty());
    }

    @Test
    public void testErrorIfNotBlankFieldHasBlankValue() throws Exception {
        Person person = new Person("");
        String constraintFileName = "name-not-blank.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertEquals(1, validationErrors.size());
        assertValidationError("name", "Can't be blank", "", validationErrors.get(0));
    }

    @Test
    public void testOkIfFieldCanBeBlankAndHasBlankValue() throws Exception {
        Person person = new Person("");
        String constraintFileName = "name-can-be-blank.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertTrue(validationErrors.isEmpty());
    }

    @Test
    public void testOkIfNotBlankConstraintIsNotSetAndFieldHasBlankValue() throws Exception {
        Person person = new Person("");
        String constraintFileName = "name-default.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertTrue(validationErrors.isEmpty());
    }

    @Test
    public void testErrorIfFieldLengthIsLargerThanMaxLength() throws Exception {
        Person person = new Person("Johnathan");
        String constraintFileName = "name-max-length-6.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertEquals(1, validationErrors.size());
        assertValidationError("name", "Must have at most 6 characters", "Johnathan", validationErrors.get(0));
    }

    @Test
    public void testOkIfFieldLengthIsLessThanMaxLength() throws Exception {
        Person person = new Person("John");
        String constraintFileName = "name-max-length-6.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertTrue(validationErrors.isEmpty());
    }

    @Test
    public void testOkIfFieldLengthEqualsToMaxLength() throws Exception {
        Person person = new Person("Johnny");
        String constraintFileName = "name-max-length-6.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertTrue(validationErrors.isEmpty());
    }

    @Test
    public void testErrorIfFieldLengthIsLessThanMinLength() throws Exception {
        Person person = new Person("Jon");
        String constraintFileName = "name-min-length-4.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertEquals(1, validationErrors.size());
        assertValidationError("name", "Must have at least 4 characters", "Jon", validationErrors.get(0));
    }

    @Test
    public void testOkIfFieldLengthIsLargerThanMinLength() throws Exception {
        Person person = new Person("Johnny");
        String constraintFileName = "name-min-length-4.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertTrue(validationErrors.isEmpty());
    }

    @Test
    public void testOkIfFieldLengthEqualsToMinLength() throws Exception {
        Person person = new Person("John");
        String constraintFileName = "name-min-length-4.json";
        List<ValidationError> validationErrors = new UniValidator().validate(person, constraintFileName);
        assertTrue(validationErrors.isEmpty());
    }

    private static void assertValidationError(String expectedField, String expectedErrorMessage, String expectedActualValue, ValidationError actualError) {
        assertEquals(expectedField, actualError.getField());
        assertEquals(expectedErrorMessage, actualError.getErrorMessage());
        assertEquals(expectedActualValue, actualError.getActualValue());
    }
}
